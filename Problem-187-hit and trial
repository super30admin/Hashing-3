
/*

Leetcode: Unsuccessful:missed by one test case 

Approach:
This approach is kind of hit and trial approach, I thought it would work but this does not seem to be the right way  of solving this question.

1.Gave prime numbers to each Character since they were limited.
2.replaced the characters with new int array with prime values.
3. for each subsequence of 10, calculated Math.pow(primeValue, index of a character within subsequence)*(index of charcater within subsequence).

4.stored this value in hashmap with key as this calculated value and value as the list containing index of such sequences.
5. Traverse through this hashmap, if any list has size greater than 1, that means it was repeated, first index from such list and added to the final result.


Hit and Trial:
I had to change the formula for temp, to get maximum test cases passed.
Also I had to change the values of the prime numbers that were assigned to get the maximum test cases passed.
*/

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
    
        HashMap<Character,Integer> map = new HashMap<>();
        HashMap<Integer,List<Integer>> indexmap = new HashMap<>();
        List<String> result = new ArrayList<>();
        
        
        int [] nums = new int [s.length()];
        map.put('A',5);
        map.put('C',7);
        map.put('G',11);
        map.put('T',3);
        
        
        for(int i=0;i<s.length();i++)
        {
            int temp=map.get(s.charAt(i));
            nums[i]=temp;
        }
        
        for(int i=0;i<s.length()-9;i++)
        {
            int temp=0;
            for(int j=i;j<i+10;j++)
            {
                //temp=temp+nums[j]*(j-i+1);//map.get(s.charAt(i));
            
                temp=temp+(j-i+1)*(int)Math.pow(nums[j],(j-i+1));
            }
                       
      //      System.out.println(temp);

            nums[i]=temp;
            if(indexmap.containsKey(temp))
            {
                List<Integer> al = indexmap.get(temp);
                al.add(i);
                indexmap.put(temp,al);
         //       System.out.printf("old temp %d   and index is %d  \n ",temp,i);

            }
            else{
                
           //     System.out.printf("this is new temp %d   and index is %d  \n ",temp,i);
                List<Integer> al = new ArrayList<>();
                al.add(i);
                indexmap.put(temp,al); 
            }
        }
        
        Iterator it = indexmap.entrySet().iterator();
        
        while(it.hasNext())
        {
            Map.Entry element = (Map.Entry)it.next();
            
            if(((List<Integer>)element.getValue()).size()>1)
            {
                int index=((List<Integer>)element.getValue()).get(0);
          //      System.out.println(index);
                StringBuilder res= new StringBuilder();
                
                for(int i=0;i<10;i++)
                {
                    
                    res.append(s.charAt(i+index));
                }
      //          System.out.println((int)element.getKey());
                result.add(res.toString());
            }
            
        }
        
        
      
        return result;
        
    }
    
}
